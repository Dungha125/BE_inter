import zipfile
import os
import shutil
import time
import json
import sys
import argparse
from pathlib import Path
from typing import List, Dict, Any
import uuid

from playwright.sync_api import sync_playwright, Page, Dialog, Error, \
    TimeoutError as PlaywrightTimeoutError

# <<< C·∫¢I TI·∫æN >>>: Th√™m th∆∞ vi·ªán cssutils ƒë·ªÉ chu·∫©n h√≥a gi√° tr·ªã CSS t·ªët h∆°n trong t∆∞∆°ng lai (hi·ªán t·∫°i ch·ªâ d√πng cho m√†u)
# B·∫°n c√≥ th·ªÉ c·∫ßn c√†i ƒë·∫∑t: pip install cssutils
try:
    import cssutils

    # T·∫Øt logging l·ªói c·ªßa cssutils ƒë·ªÉ kh√¥ng l√†m nhi·ªÖu output
    cssutils.log.setLevel('CRITICAL')
except ImportError:
    cssutils = None
    print("[GraderScript] C·∫£nh b√°o: Th∆∞ vi·ªán 'cssutils' kh√¥ng ƒë∆∞·ª£c c√†i ƒë·∫∑t. Kh·∫£ nƒÉng chu·∫©n h√≥a m√†u s·∫Øc s·∫Ω b·ªã h·∫°n ch·∫ø.")


class SubmissionResultData:
    def __init__(self, test: str, result: str):
        self.test = test
        self.result = result

    def to_dict(self):
        return self.__dict__


def unzip_submission(zip_path: str, target_dir: str):
    os.makedirs(target_dir, exist_ok=True)
    with zipfile.ZipFile(zip_path, 'r') as zip_ref:
        zip_ref.extractall(target_dir)
    print(f"[GraderScript] ƒê√£ gi·∫£i n√©n {zip_path} sang {target_dir}")


# <<< C·∫¢I TI·∫æN >>>: M·ªü r·ªông ƒë√°ng k·ªÉ h√†m chu·∫©n h√≥a m√†u s·∫Øc
def _normalize_color(color_string: str) -> str:
    if not color_string:
        return ""

    # S·ª≠ d·ª•ng cssutils n·∫øu c√≥ ƒë·ªÉ ph√¢n t√≠ch m√†u chuy√™n nghi·ªáp
    if cssutils:
        try:
            # T·∫°o m·ªôt style rule t·∫°m th·ªùi ƒë·ªÉ parse
            sheet = cssutils.parseString(f'a {{ color: {color_string} }}')
            style = sheet.cssRules[0].style
            # L·∫•y gi√° tr·ªã rgb ho·∫∑c rgba
            if 'rgb' in style.color:
                return style.color.replace(" ", "")
        except Exception:
            # N·∫øu cssutils kh√¥ng parse ƒë∆∞·ª£c, quay l·∫°i ph∆∞∆°ng ph√°p c≈©
            pass

    # Ph∆∞∆°ng ph√°p c≈© d·ª± ph√≤ng, m·ªü r·ªông v·ªõi nhi·ªÅu m√†u h∆°n
    processed_string = color_string.lower().replace(" ", "")
    color_map = {
        # T√™n m√†u c∆° b·∫£n
        "green": "rgb(0,128,0)", "red": "rgb(255,0,0)", "blue": "rgb(0,0,255)",
        "yellow": "rgb(255,255,0)", "black": "rgb(0,0,0)", "white": "rgb(255,255,255)",
        "transparent": "rgba(0,0,0,0)", "grey": "rgb(128,128,128)",
        # C√°c m√†u ph·ªï bi·∫øn kh√°c
        "lightblue": "rgb(173,216,230)", "darkgray": "rgb(169,169,169)",
        "lightgrey": "rgb(211,211,211)", "darkgrey": "rgb(169,169,169)",
        "purple": "rgb(128,0,128)", "orange": "rgb(255,165,0)", "pink": "rgb(255,192,203)",
        # Th√™m c√°c m√†u kh√°c n·∫øu c·∫ßn
    }
    if processed_string in color_map:
        return color_map[processed_string]

    return processed_string.replace(" ", "")


# <<< C·∫¢I TI·∫æN >>>: M·ªü r·ªông trigger v·ªõi 'hover', 'submit', 'refresh'
def _execute_trigger_actions(page: Page, trigger_string: str):
    """
    Ph√¢n t√≠ch v√† th·ª±c thi m·ªôt chu·ªói c√°c h√†nh ƒë·ªông trigger.
    H·ªó tr·ª£: 'click:selector', 'input:selector=value', 'hover:selector', 'submit:selector', 'refresh'
    """
    if not trigger_string:
        return

    actions = [action.strip() for action in trigger_string.split(';')]
    print(f"[GraderScript]     Th·ª±c thi chu·ªói {len(actions)} h√†nh ƒë·ªông trigger...")
    for i, action_str in enumerate(actions):
        print(f"[GraderScript]       H√†nh ƒë·ªông {i + 1}: '{action_str}'")
        if action_str.startswith("click:"):
            selector = action_str.split("click:", 1)[1].strip()
            if not selector: raise ValueError("Selector trong trigger 'click' kh√¥ng ƒë∆∞·ª£c r·ªóng.")
            page.click(selector, timeout=5000)

        elif action_str.startswith("input:"):
            try:
                parts = action_str.split("=", 1)
                selector = parts[0].split("input:", 1)[1].strip()
                value_to_fill = parts[1]
                if not selector: raise ValueError("Selector trong trigger 'input' kh√¥ng ƒë∆∞·ª£c r·ªóng.")
                page.fill(selector, value_to_fill, timeout=5000)
            except (IndexError, ValueError) as e:
                raise ValueError(f"ƒê·ªãnh d·∫°ng trigger 'input' kh√¥ng h·ª£p l·ªá: '{action_str}'. L·ªói: {e}")

        elif action_str.startswith("hover:"):  # M·ªõi
            selector = action_str.split("hover:", 1)[1].strip()
            if not selector: raise ValueError("Selector trong trigger 'hover' kh√¥ng ƒë∆∞·ª£c r·ªóng.")
            page.hover(selector, timeout=5000)

        elif action_str.startswith("submit:"):  # M·ªõi
            selector = action_str.split("submit:", 1)[1].strip()
            if not selector: raise ValueError("Selector trong trigger 'submit' kh√¥ng ƒë∆∞·ª£c r·ªóng.")
            page.eval_on_selector(selector, "form => form.submit()")

        elif action_str == "refresh":  # M·ªõi
            page.reload(wait_until="networkidle")

        else:
            raise ValueError(f"H√†nh ƒë·ªông trigger kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£: '{action_str}'")

        page.wait_for_timeout(300)  # ƒê·ª£i m·ªôt ch√∫t ƒë·ªÉ UI c·∫≠p nh·∫≠t


def run_grading_logic(exercise_data: Dict[str, Any], index_path: Path) -> List[Dict[str, Any]]:
    results_list: List[SubmissionResultData] = []
    print(f"[GraderScript] B·∫Øt ƒë·∫ßu Playwright ƒê·ªíNG B·ªò ƒë·ªÉ ch·∫•m ƒëi·ªÉm {index_path.resolve()}")

    try:
        with sync_playwright() as p:
            browser = p.chromium.launch(headless=True)
            context = browser.new_context()
            page = context.new_page()

            # <<< C·∫¢I TI·∫æN >>>: T·∫£i trang m·ªôt l·∫ßn duy nh·∫•t ·ªü ƒë·∫ßu
            initial_url = f"file://{index_path.resolve()}"
            page.goto(initial_url)
            page.wait_for_load_state('networkidle', timeout=15000)
            print(f"[GraderScript] Trang ƒë√£ ƒë∆∞·ª£c t·∫£i l·∫ßn ƒë·∫ßu: {page.url}")

            testcases = exercise_data.get("frontend_testcases", exercise_data.get("testcases", []))
            exercise_id = exercise_data.get("id", "N/A")

            if not testcases:
                results_list.append(
                    SubmissionResultData(test="Setup", result="‚ö†Ô∏è Kh√¥ng c√≥ test case n√†o ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a."))

            for tc_data in testcases:
                tc_name = tc_data.get('name', f"Test Case V√¥ Danh {tc_data.get('id', '')}")
                tc_type = tc_data.get('type', 'unknown')
                tc_selector = tc_data.get('selector')
                tc_expected = tc_data.get('expected')
                tc_trigger = tc_data.get('trigger')
                tc_attribute_name = tc_data.get('attributeName')

                print(f"[GraderScript]   ƒêang ch·∫°y test case: '{tc_name}' (Lo·∫°i: {tc_type})")

                try:
                    # <<< C·∫¢I TI·∫æN QU·∫¢N L√ù TR·∫†NG TH√ÅI >>>
                    # Ch·ªâ t·∫£i l·∫°i trang n·∫øu test case kh√¥ng c√≥ trigger,
                    # ƒë·ªÉ ƒë·∫£m b·∫£o tr·∫°ng th√°i ƒë∆∞·ª£c gi·ªØ nguy√™n cho c√°c test case c√≥ t∆∞∆°ng t√°c.
                    if not tc_trigger:
                        print(f"[GraderScript]     Reset tr·∫°ng th√°i trang (t·∫£i l·∫°i) cho test case kh√¥ng c√≥ trigger.")
                        page.reload(wait_until="networkidle")
                        page.wait_for_timeout(200)  # ƒê·ª£i th√™m ch√∫t cho ·ªïn ƒë·ªãnh

                    # 1. TH·ª∞C THI TRIGGER (TR·ª™ js_alert s·∫Ω x·ª≠ l√Ω ri√™ng)
                    if tc_type != "js_alert":
                        _execute_trigger_actions(page, tc_trigger)

                    # 2. TH·ª∞C HI·ªÜN KI·ªÇM TRA
                    if tc_type == "element_exists":
                        if not tc_selector: raise ValueError("Selector l√† b·∫Øt bu·ªôc")
                        element = page.query_selector(tc_selector)
                        if element and element.is_visible():
                            results_list.append(SubmissionResultData(test=tc_name, result="‚úÖ Passed"))
                        else:
                            results_list.append(SubmissionResultData(test=tc_name,
                                                                     result=f"‚ùå Failed (Ph·∫ßn t·ª≠ '{tc_selector}' kh√¥ng t·ªìn t·∫°i ho·∫∑c kh√¥ng hi·ªÉn th·ªã)"))

                    elif tc_type == "text_equals":
                        if not tc_selector: raise ValueError("Selector l√† b·∫Øt bu·ªôc")
                        if tc_expected is None: raise ValueError("Expected text l√† b·∫Øt bu·ªôc")
                        element = page.query_selector(tc_selector)
                        actual_text = element.text_content().strip() if element else ""
                        expected_text = str(tc_expected).strip()
                        if actual_text == expected_text:
                            results_list.append(SubmissionResultData(test=tc_name, result="‚úÖ Passed"))
                        else:
                            results_list.append(SubmissionResultData(test=tc_name,
                                                                     result=f"‚ùå Failed (Mong ƒë·ª£i text '{expected_text}', nh·∫≠n ƒë∆∞·ª£c '{actual_text}')"))

                    # <<< THAY TH·∫æ B·∫∞NG ƒêO·∫†N CODE N√ÄY >>>
                    elif tc_type == "attribute_equals":
                        if not tc_selector: raise ValueError("Selector l√† b·∫Øt bu·ªôc")
                        if not tc_attribute_name: raise ValueError("AttributeName l√† b·∫Øt bu·ªôc")
                        if tc_expected is None: raise ValueError("Expected value l√† b·∫Øt bu·ªôc")

                        locator = page.locator(tc_selector).first

                        # üí° C·∫£i ti·∫øn c·ªët l√µi n·∫±m ·ªü ƒë√¢y
                        prop_to_query = tc_attribute_name.lower()
                        if prop_to_query == 'background':
                            print(
                                "[GraderScript]     Ph√°t hi·ªán 'background', t·ª± ƒë·ªông chuy·ªÉn sang ki·ªÉm tra 'background-color'.")
                            prop_to_query = 'background-color'

                        # X·ª≠ l√Ω c√°c thu·ªôc t√≠nh CSS
                        if "-" in prop_to_query or prop_to_query in ["color", "font-family", "font-size", "display",
                                                                     "visibility", "opacity", "width", "position",
                                                                     "bottom", "border-radius", "box-shadow", "padding",
                                                                     "margin", "text-align", "justify-content",
                                                                     "align-items", "grid-template-columns",
                                                                     "transition-property", "transition-duration"]:
                            actual_value = locator.evaluate(
                                f"el => window.getComputedStyle(el).getPropertyValue('{prop_to_query}')")
                            expected_to_compare = str(tc_expected)

                            if "color" in prop_to_query or "background" in prop_to_query:
                                actual_value = _normalize_color(actual_value)
                                expected_to_compare = _normalize_color(expected_to_compare)
                            else:
                                actual_value = actual_value.strip().replace('"', '')
                                expected_to_compare = expected_to_compare.strip().replace('"', '')

                        # X·ª≠ l√Ω c√°c thu·ªôc t√≠nh HTML th√¥ng th∆∞·ªùng
                        else:
                            actual_value = locator.get_attribute(tc_attribute_name) or ""
                            expected_to_compare = str(tc_expected)
                            if tc_attribute_name == 'disabled':
                                actual_value = "true" if actual_value is not None else "false"

                        if actual_value == expected_to_compare:
                            results_list.append(SubmissionResultData(test=tc_name, result="‚úÖ Passed"))
                        else:
                            # S·ª≠ d·ª•ng tc_attribute_name g·ªëc ƒë·ªÉ hi·ªÉn th·ªã l·ªói cho ng∆∞·ªùi d√πng
                            results_list.append(SubmissionResultData(test=tc_name,
                                                                     result=f"‚ùå Failed (Thu·ªôc t√≠nh '{tc_attribute_name}': mong ƒë·ª£i '{expected_to_compare}', nh·∫≠n ƒë∆∞·ª£c '{actual_value}')"))

                    # <<< C·∫¢I TI·∫æN >>>: ƒê·ªïi t√™n th√†nh element_does_not_exist cho r√µ r√†ng
                    elif tc_type == "element_does_not_exist" or tc_type == "element_not_exists":
                        if not tc_selector: raise ValueError("Selector l√† b·∫Øt bu·ªôc")
                        try:
                            # Ch·ªù cho ph·∫ßn t·ª≠ bi·∫øn m·∫•t ho·∫∑c b·ªã ·∫©n ƒëi, timeout ng·∫Øn
                            page.locator(tc_selector).wait_for(state='hidden', timeout=2000)
                            results_list.append(SubmissionResultData(test=tc_name, result="‚úÖ Passed"))
                        except PlaywrightTimeoutError:
                            results_list.append(SubmissionResultData(test=tc_name,
                                                                     result=f"‚ùå Failed (Ph·∫ßn t·ª≠ '{tc_selector}' v·∫´n t·ªìn t·∫°i/hi·ªÉn th·ªã)"))

                    elif tc_type == "url_contains":
                        if tc_expected is None: raise ValueError("Expected URL substring l√† b·∫Øt bu·ªôc")
                        if str(tc_expected) in page.url:
                            results_list.append(SubmissionResultData(test=tc_name, result="‚úÖ Passed"))
                        else:
                            results_list.append(SubmissionResultData(test=tc_name,
                                                                     result=f"‚ùå Failed (URL mong ƒë·ª£i ch·ª©a '{tc_expected}', nh∆∞ng URL hi·ªán t·∫°i l√† '{page.url}')"))

                    # <<< C·∫¢I TI·∫æN >>>: Logic js_alert ƒë∆∞·ª£c vi·∫øt l·∫°i ho√†n to√†n, an to√†n v√† ch√≠nh x√°c
                    elif tc_type == "js_alert":
                        if tc_expected is None: raise ValueError("Expected alert text l√† b·∫Øt bu·ªôc")

                        alert_message = None

                        def handle_dialog(dialog: Dialog):
                            nonlocal alert_message
                            alert_message = dialog.message
                            print(f"[GraderScript]     B·∫Øt ƒë∆∞·ª£c dialog v·ªõi message: '{alert_message}'")
                            dialog.dismiss()

                        # 1. G·∫Øn tr√¨nh nghe s·ª± ki·ªán TR∆Ø·ªöC khi th·ª±c hi·ªán h√†nh ƒë·ªông
                        page.once("dialog", handle_dialog)

                        # 2. Th·ª±c thi trigger
                        _execute_trigger_actions(page, tc_trigger)

                        # 3. ƒê·ª£i v√† ki·ªÉm tra k·∫øt qu·∫£ (v·ªõi timeout ng·∫Øn)
                        page.wait_for_timeout(1000)  # ƒê·ª£i 1s ƒë·ªÉ dialog c√≥ th·ªùi gian xu·∫•t hi·ªán

                        if alert_message is not None and alert_message.strip() == str(tc_expected).strip():
                            results_list.append(SubmissionResultData(test=tc_name, result="‚úÖ Passed"))
                        else:
                            results_list.append(SubmissionResultData(test=tc_name,
                                                                     result=f"‚ùå Failed (Mong ƒë·ª£i alert '{tc_expected}', nh·∫≠n ƒë∆∞·ª£c '{alert_message}')"))

                    else:
                        results_list.append(SubmissionResultData(test=tc_name,
                                                                 result=f"‚ö†Ô∏è Skipped (Lo·∫°i test kh√¥ng x√°c ƒë·ªãnh: {tc_type})"))


                except (Error, ValueError, Exception) as e:

                    error_detail = f"{type(e).__name__}: {str(e)}"

                    results_list.append(SubmissionResultData(test=tc_name, result=f"‚ùå Error: {error_detail}"))

            # <<< C·∫¢I TI·∫æN >>>: ƒê√≥ng browser ·ªü cu·ªëi
            browser.close()

    except Exception as outer_exception:
        error_type_name = type(outer_exception).__name__
        error_message_detail = str(outer_exception)
        full_error_msg = f"{error_type_name}: {error_message_detail}" if error_message_detail else error_type_name
        print(f"[GraderScript] L·ªói nghi√™m tr·ªçng trong run_grading_logic: {full_error_msg}")
        if not any(r.test == "H·ªá th·ªëng ch·∫•m ƒëi·ªÉm" for r in results_list):
            results_list.append(SubmissionResultData(test="H·ªá th·ªëng ch·∫•m ƒëi·ªÉm",
                                                     result=f"‚ùå Error: L·ªói Playwright setup - {full_error_msg}"))

    finally:
        print(f"[GraderScript] K·∫øt th√∫c Playwright. S·ªë k·∫øt qu·∫£: {len(results_list)}")

    return [r.to_dict() for r in results_list]


def main():
    parser = argparse.ArgumentParser(description="Ch·∫•m ƒëi·ªÉm b√†i n·ªôp HTML/JS.")
    parser.add_argument("exercise_json_str", help="M·ªôt chu·ªói JSON ch·ª©a th√¥ng tin b√†i t·∫≠p (Exercise object).")
    parser.add_argument("zip_file_path", help="ƒê∆∞·ªùng d·∫´n ƒë·∫øn file ZIP b√†i n·ªôp.")
    parser.add_argument("output_file_path", help="ƒê∆∞·ªùng d·∫´n ƒë·ªÉ ghi file JSON k·∫øt qu·∫£.")
    args = parser.parse_args()

    if sys.platform == "win32":
        try:
            sys.stdout.reconfigure(encoding='utf-8')
            sys.stderr.reconfigure(encoding='utf-8')
        except Exception as e_enc:
            print(f"[GraderScript] Warning: Kh√¥ng th·ªÉ reconfigure stdout/stderr encoding: {e_enc}", file=sys.stderr)

    print(f"[GraderScript] Nh·∫≠n ƒë∆∞·ª£c zip_file_path: {args.zip_file_path}")
    print(f"[GraderScript] Nh·∫≠n ƒë∆∞·ª£c output_file_path: {args.output_file_path}")

    results_for_json = []
    extract_dir = None

    try:
        exercise_data = json.loads(args.exercise_json_str)
        # <<< C·∫¢I TI·∫æN >>>: ƒê·ªïi t√™n th∆∞ m·ª•c gi·∫£i n√©n ƒë·ªÉ d·ªÖ debug h∆°n
        exercise_id = exercise_data.get("id", "unknown_id")
        timestamp = str(int(time.time()))
        base_submissions_dir = Path(__file__).resolve().parent / "temp_submissions"
        base_submissions_dir.mkdir(exist_ok=True)
        unique_folder_name = f"exercise-{exercise_id}_{timestamp}"
        extract_dir = base_submissions_dir / unique_folder_name

        unzip_submission(args.zip_file_path, str(extract_dir))
        index_path = extract_dir / "index.html"

        if not index_path.exists():
            # Th·ª≠ t√¨m c√°c file html kh√°c n·∫øu kh√¥ng c√≥ index.html
            html_files = list(extract_dir.glob('*.html'))
            if not html_files:
                print(f"[GraderScript] L·ªói: Kh√¥ng t√¨m th·∫•y file .html n√†o trong {extract_dir}")
                results_for_json = [SubmissionResultData(test="Thi·∫øt l·∫≠p",
                                                         result="‚ùå Error: Kh√¥ng t√¨m th·∫•y file .html n√†o trong b√†i n·ªôp.").to_dict()]
            else:
                index_path = html_files[0]
                print(
                    f"[GraderScript] C·∫£nh b√°o: kh√¥ng t√¨m th·∫•y 'index.html', s·ª≠ d·ª•ng file '{index_path.name}' thay th·∫ø.")
                results_for_json = run_grading_logic(exercise_data, index_path)
        else:
            results_for_json = run_grading_logic(exercise_data, index_path)

    except json.JSONDecodeError as e:
        results_for_json = [
            SubmissionResultData(test="Setup Error", result=f"‚ùå Error: L·ªói ƒë·ªãnh d·∫°ng JSON c·ªßa b√†i t·∫≠p - {e}").to_dict()]
    except Exception as e:
        error_msg = f"{type(e).__name__}: {str(e)}"
        print(f"[GraderScript] L·ªói kh√¥ng x√°c ƒë·ªãnh trong main(): {error_msg}")
        if not results_for_json: results_for_json = []
        results_for_json.append(SubmissionResultData(test="System Error", result=f"‚ùå Error: {error_msg}").to_dict())
    finally:
        if extract_dir and extract_dir.exists():
            try:
                # Gi·ªØ l·∫°i th∆∞ m·ª•c n·∫øu c√≥ l·ªói ƒë·ªÉ debug, x√≥a n·∫øu ch·∫°y th√†nh c√¥ng
                if any("Error" in r['result'] for r in results_for_json):
                    print(f"[GraderScript] Ph√°t hi·ªán l·ªói, gi·ªØ l·∫°i th∆∞ m·ª•c ƒë·ªÉ debug: {extract_dir}")
                else:
                    shutil.rmtree(extract_dir)
                    print(f"[GraderScript] ƒê√£ d·ªçn d·∫πp th∆∞ m·ª•c th√†nh c√¥ng: {extract_dir}")
            except OSError as e_rm:
                print(f"[GraderScript] L·ªói khi d·ªçn d·∫πp th∆∞ m·ª•c {extract_dir}: {e_rm}")

        try:
            with open(args.output_file_path, 'w', encoding='utf-8') as f:
                json.dump(results_for_json, f, ensure_ascii=False, indent=4)
            print(f"[GraderScript] ƒê√£ ghi k·∫øt qu·∫£ v√†o {args.output_file_path}")
        except Exception as e_write:
            print(f"[GraderScript] L·ªói khi ghi file k·∫øt qu·∫£ {args.output_file_path}: {e_write}")
            # In ra console n·∫øu kh√¥ng ghi ƒë∆∞·ª£c file
            print("---RESULTS_START---")
            print(json.dumps(results_for_json, ensure_ascii=False, indent=4))
            print("---RESULTS_END---")


if __name__ == "__main__":
    main()